<%
//DYNAMIC_VARIABLE:extensions=bootstrap,jquery,vuejs,axios,fontawesome,lodash
%>
<%- include(data.system_layout_header)  %>

<div id="app">
    <div class="card smartFormCard">
        <div class="card-header">
            <div class="pull-left" :class="{areaLoading: pageStatus=='busy'}">{{commandTitle}} Page Item</div>
            <div class="pull-right">
                <div class="pull-left headerInfo"></div><i v-show="pageStatus!='ready'"
                    class="pull-left fa fa-cog fa-spin waitSpinner"></i>
            </div>
        </div>
        <div class="card-body smartFormBody" :class="{areaLoading: pageStatus=='busy'}">
            <div class="messageArea" style="display:none">
                <div v-show="formStatus=='success'" class="alert alert-success" v-html="formMessage"></div>
                <div v-show="formStatus=='invalid'" class="alert alert-danger">
                    <strong>Form is invalid:</strong> {{formMessage}}
                </div>
                <div v-show="formStatus=='error'" class="alert alert-danger">
                    <strong>Error:</strong> <span v-html="formMessage"></span>
                </div>
            </div>
            <div v-show="pageStatus!='busy'" class="bodyContent" style="display:none">

                <!-- field: IDCODE -->
                <dl class="dataType_line">
                    <dt><span v-if="fields.idCode.required">*</span>{{fields.idCode.label}}</dt>
                    <dd>
                        <div>
                            <input id="field_idCode" v-model="fields.idCode.value" class="form-control dataType_line"
                                @keydown="keyWasPressed" @keyup="keyWasPressed" v-on:keyup.enter="onEnterClick()"
                                :disabled="pageStatus=='busy'" />
                        </div>
                        <!-- field info, examples, and error messags -->
                        <div>
                            <small v-if="fields.idCode.errorMessage != ''" class="error">{{fields.idCode.errorMessage}}
                            </small>
                            <small v-if="fields.idCode.info" class="info">{{fields.idCode.info}} </small>
                            <small v-if="fields.idCode.example" class="example"><span class="exampleLabel">Example:</span> <span class="exampleText">{{fields.idCode.example}}</span>
                            </small>
                        </div>
                    </dd>
                </dl>

                <!-- field: MENU -->
                <dl class="dataType_choice">
                    <dt><span v-if="fields.menu.required">*</span>{{fields.menu.label}}</dt>
                    <dd>
                        <div>
                            <!--radioVertical-->
                            <div v-if="fields.menu.choiceSelector == 'radioVertical'" class="display_radioVertical">
                                <ul>
                                    <li v-for="choice in fields.menu.choices">
                                        <label class="prohibitSelectionClickable" v-on:keyup.enter="onEnterClick()"><input
                                        type="radio" v-model="fields.menu.value" :value="choice.idCode">
                                        {{choice.label}}</label>
                                    </li>
                                </ul>
                            </div>
                            <!--radioHorizontal-->
                            <div v-if="fields.menu.choiceSelector == 'radioHorizontal'" class="display_radioHorizontal">
                                <ul>
                                    <li v-for="choice in fields.menu.choices">
                                        <label class="prohibitSelectionClickable" v-on:keyup.enter="onEnterClick()"><input
                                        type="radio" v-model="fields.menu.value" :value="choice.idCode">
                                        {{choice.label}}</label>
                                    </li>
                                </ul>
                            </div>
                            <!--dropdown-->
                            <div v-if="fields.menu.choiceSelector == 'dropdown'" class="display_dropdown">
                                <select v-model="fields.menu.value">
                                    <option v-for="choice in fields.menu.choices" :value="choice.idCode">
                                    {{choice.label}}</option>
                                </select>
                            </div>
                        </div>
                        <!-- field info, examples, and error messags -->
                        <div>
                            <small v-if="fields.menu.errorMessage != ''" class="error">{{fields.menu.errorMessage}}
                            </small>
                            <small v-if="fields.menu.info" class="info">{{fields.menu.info}} </small>
                            <small v-if="fields.menu.example" class="example"><span class="exampleLabel">Example:</span> <span class="exampleText">{{fields.menu.example}}</span>
                            </small>
                        </div>
                    </dd>
                </dl>

                <!-- field: TITLE -->
                <dl class="dataType_line">
                    <dt><span v-if="fields.title.required">*</span>{{fields.title.label}}</dt>
                    <dd>
                        <div>
                            <input id="field_title" v-model="fields.title.value" class="form-control dataType_line"
                                @keydown="keyWasPressed" @keyup="keyWasPressed" v-on:keyup.enter="onEnterClick()"
                                :disabled="pageStatus=='busy'" />
                        </div>
                        <!-- field info, examples, and error messags -->
                        <div>
                            <small v-if="fields.title.errorMessage != ''" class="error">{{fields.title.errorMessage}}
                            </small>
                            <small v-if="fields.title.info" class="info">{{fields.title.info}} </small>
                            <small v-if="fields.title.example" class="example"><span class="exampleLabel">Example:</span> <span class="exampleText">{{fields.title.example}}</span>
                            </small>
                        </div>
                    </dd>
                </dl>

                <!-- field: DESCRIPTION -->
                <dl class="dataType_paragraph">
                    <dt><span v-if="fields.description.required">*</span>{{fields.description.label}}</dt>
                    <dd>
                        <div>
                            <textarea id="field_description" :disabled="pageStatus=='busy'" v-model="fields.description.value"
                                    @keydown="keyWasPressed" @keyup="keyWasPressed" class="form-control dataType_paragraph_control"></textarea>
                        </div>
                        <!-- field info, examples, and error messags -->
                        <div>
                            <small v-if="fields.description.errorMessage != ''" class="error">{{fields.description.errorMessage}}
                            </small>
                            <small v-if="fields.description.info" class="info">{{fields.description.info}} </small>
                            <small v-if="fields.description.example" class="example"><span class="exampleLabel">Example:</span> <span class="exampleText">{{fields.description.example}}</span>
                            </small>
                        </div>
                    </dd>
                </dl>

                <!-- field: KIND -->
                <dl class="dataType_line">
                    <dt><span v-if="fields.kind.required">*</span>{{fields.kind.label}}</dt>
                    <dd>
                        <div>
                            <input id="field_kind" v-model="fields.kind.value" class="form-control dataType_line"
                                @keydown="keyWasPressed" @keyup="keyWasPressed" v-on:keyup.enter="onEnterClick()"
                                :disabled="pageStatus=='busy'" />
                        </div>
                        <!-- field info, examples, and error messags -->
                        <div>
                            <small v-if="fields.kind.errorMessage != ''" class="error">{{fields.kind.errorMessage}}
                            </small>
                            <small v-if="fields.kind.info" class="info">{{fields.kind.info}} </small>
                            <small v-if="fields.kind.example" class="example"><span class="exampleLabel">Example:</span> <span class="exampleText">{{fields.kind.example}}</span>
                            </small>
                        </div>
                    </dd>
                </dl>

                <!-- field: SUBSITE -->
                <dl class="dataType_line">
                    <dt><span v-if="fields.subsite.required">*</span>{{fields.subsite.label}}</dt>
                    <dd>
                        <div>
                            <input id="field_subsite" v-model="fields.subsite.value" class="form-control dataType_line"
                                @keydown="keyWasPressed" @keyup="keyWasPressed" v-on:keyup.enter="onEnterClick()"
                                :disabled="pageStatus=='busy'" />
                        </div>
                        <!-- field info, examples, and error messags -->
                        <div>
                            <small v-if="fields.subsite.errorMessage != ''" class="error">{{fields.subsite.errorMessage}}
                            </small>
                            <small v-if="fields.subsite.info" class="info">{{fields.subsite.info}} </small>
                            <small v-if="fields.subsite.example" class="example"><span class="exampleLabel">Example:</span> <span class="exampleText">{{fields.subsite.example}}</span>
                            </small>
                        </div>
                    </dd>
                </dl>

                <!-- field: TYPE -->
                <dl class="dataType_line">
                    <dt><span v-if="fields.type.required">*</span>{{fields.type.label}}</dt>
                    <dd>
                        <div>
                            <input id="field_type" v-model="fields.type.value" class="form-control dataType_line"
                                @keydown="keyWasPressed" @keyup="keyWasPressed" v-on:keyup.enter="onEnterClick()"
                                :disabled="pageStatus=='busy'" />
                        </div>
                        <!-- field info, examples, and error messags -->
                        <div>
                            <small v-if="fields.type.errorMessage != ''" class="error">{{fields.type.errorMessage}}
                            </small>
                            <small v-if="fields.type.info" class="info">{{fields.type.info}} </small>
                            <small v-if="fields.type.example" class="example"><span class="exampleLabel">Example:</span> <span class="exampleText">{{fields.type.example}}</span>
                            </small>
                        </div>
                    </dd>
                </dl>

                <!-- field: ACCESS GROUPS -->
                <dl class="dataType_list">
                    <dt><span v-if="fields.accessGroups.required">*</span>{{fields.accessGroups.label}}</dt>
                    <dd>
                        <div>
                            <input id="field_accessGroups" v-model="fields.accessGroups.value" class="form-control dataType_list"
                                @keydown="keyWasPressed" @keyup="keyWasPressed" v-on:keyup.enter="onEnterClick()"
                                :disabled="pageStatus=='busy'" />
                        </div>
                        <!-- field info, examples, and error messags -->
                        <div>
                            <small v-if="fields.accessGroups.errorMessage != ''" class="error">{{fields.accessGroups.errorMessage}}
                            </small>
                            <small v-if="fields.accessGroups.info" class="info">{{fields.accessGroups.info}} </small>
                            <small v-if="fields.accessGroups.example" class="example"><span class="exampleLabel">Example:</span> <span class="exampleText">{{fields.accessGroups.example}}</span>
                            </small>
                        </div>
                    </dd>
                </dl>

                <!-- field: DISPLAY ORDER -->
                <dl class="dataType_wholeNumber">
                    <dt><span v-if="fields.displayOrder.required">*</span>{{fields.displayOrder.label}}</dt>
                    <dd>
                        <div>
                            <input id="field_displayOrder" :disabled="pageStatus=='busy'" v-on:keyup.enter="onEnterClick()"
                                    @keydown="keyWasPressed" @keyup="keyWasPressed" v-model="fields.displayOrder.value"
                                    class="form-control dataType_wholeNumber_control" />
                        </div>
                        <!-- field info, examples, and error messags -->
                        <div>
                            <small v-if="fields.displayOrder.errorMessage != ''" class="error">{{fields.displayOrder.errorMessage}}
                            </small>
                            <small v-if="fields.displayOrder.info" class="info">{{fields.displayOrder.info}} </small>
                            <small v-if="fields.displayOrder.example" class="example"><span class="exampleLabel">Example:</span> <span class="exampleText">{{fields.displayOrder.example}}</span>
                            </small>
                        </div>
                    </dd>
                </dl>

                <!-- field: HOLD MENU -->
                <dl class="dataType_line">
                    <dt><span v-if="fields.holdMenu.required">*</span>{{fields.holdMenu.label}}</dt>
                    <dd>
                        <div>
                            <input id="field_holdMenu" v-model="fields.holdMenu.value" class="form-control dataType_line"
                                @keydown="keyWasPressed" @keyup="keyWasPressed" v-on:keyup.enter="onEnterClick()"
                                :disabled="pageStatus=='busy'" />
                        </div>
                        <!-- field info, examples, and error messags -->
                        <div>
                            <small v-if="fields.holdMenu.errorMessage != ''" class="error">{{fields.holdMenu.errorMessage}}
                            </small>
                            <small v-if="fields.holdMenu.info" class="info">{{fields.holdMenu.info}} </small>
                            <small v-if="fields.holdMenu.example" class="example"><span class="exampleLabel">Example:</span> <span class="exampleText">{{fields.holdMenu.example}}</span>
                            </small>
                        </div>
                    </dd>
                </dl>



                <!-- form notes -->
                <div class="pull-left formNotes">
                    <span v-show="thereAreRequiredFields()" class="requiredFieldMarker">* required field</span>
				</div>
				<div class="clear"></div>

                <!-- submit button -->
                <div class="pull-left">
                    <button @click="cancelForm()" class="btn btn-default cancelButton">Cancel</button>
                </div>
                <div class="pull-right">
                    <button id="buttonSubmit" :disabled="formSubmitButtonShouldBeDisabled()" @click="processForm()"
                        class="btn btn-default formButton">Save</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const app = new Vue({
        el: '#app',
        data: {
            clientSideEmptyFieldChecking: false,
            pageStatus: 'ready',
            formStatus: '',
            formMessage: '',
            fields: {
                  idCode: {
                    label: '',
                    dataTypeIdCode: '',
                    value: '',
                    info: '',
                    example: '',
                    required: false,
                    errorStatus: '',
                    errorMessage: '',
                    displayStatus: '',
                    choices: '',
                    choiceSelector: ''
                },
                menu: {
                    label: '',
                    dataTypeIdCode: '',
                    value: '',
                    info: '',
                    example: '',
                    required: false,
                    errorStatus: '',
                    errorMessage: '',
                    displayStatus: '',
                    choices: '',
                    choiceSelector: ''
                },
                title: {
                    label: '',
                    dataTypeIdCode: '',
                    value: '',
                    info: '',
                    example: '',
                    required: false,
                    errorStatus: '',
                    errorMessage: '',
                    displayStatus: '',
                    choices: '',
                    choiceSelector: ''
                },
                description: {
                    label: '',
                    dataTypeIdCode: '',
                    value: '',
                    info: '',
                    example: '',
                    required: false,
                    errorStatus: '',
                    errorMessage: '',
                    displayStatus: '',
                    choices: '',
                    choiceSelector: ''
                },
                kind: {
                    label: '',
                    dataTypeIdCode: '',
                    value: '',
                    info: '',
                    example: '',
                    required: false,
                    errorStatus: '',
                    errorMessage: '',
                    displayStatus: '',
                    choices: '',
                    choiceSelector: ''
                },
                subsite: {
                    label: '',
                    dataTypeIdCode: '',
                    value: '',
                    info: '',
                    example: '',
                    required: false,
                    errorStatus: '',
                    errorMessage: '',
                    displayStatus: '',
                    choices: '',
                    choiceSelector: ''
                },
                type: {
                    label: '',
                    dataTypeIdCode: '',
                    value: '',
                    info: '',
                    example: '',
                    required: false,
                    errorStatus: '',
                    errorMessage: '',
                    displayStatus: '',
                    choices: '',
                    choiceSelector: ''
                },
                accessGroups: {
                    label: '',
                    dataTypeIdCode: '',
                    value: '',
                    info: '',
                    example: '',
                    required: false,
                    errorStatus: '',
                    errorMessage: '',
                    displayStatus: '',
                    choices: '',
                    choiceSelector: ''
                },
                displayOrder: {
                    label: '',
                    dataTypeIdCode: '',
                    value: '',
                    info: '',
                    example: '',
                    required: false,
                    errorStatus: '',
                    errorMessage: '',
                    displayStatus: '',
                    choices: '',
                    choiceSelector: ''
                },
                holdMenu: {
                    label: '',
                    dataTypeIdCode: '',
                    value: '',
                    info: '',
                    example: '',
                    required: false,
                    errorStatus: '',
                    errorMessage: '',
                    displayStatus: '',
                    choices: '',
                    choiceSelector: ''
                }
            },
            returnUrl: '',
            command: '',
            id: 0,
            commandTitle: ''
        },
        methods: {
            initialize: function () {
                $('.bodyContent').show();
                $('.messageArea').show();
                this.returnUrl = qsys.getParameterValueFromUrl('returnUrl');
                this.command = qsys.getParameterValueFromUrl('command');
                this.id = qsys.getParameterValueFromUrl('id');
                this.commandTitle = qstr.capitalizeFirstLetter(this.command);

                this.loadPageData();
            },
            loadPageData: function () {
                this.pageStatus = 'busy';
                const that = this;
                axios({
                    method: 'post',
                    url: 'controllerManagePageItem',
                    data: {
                        action: 'loadPageData',
                        command: this.command,
                        id: this.id
                    }
                }).then(function (responseObject) {
                    const response = qsys.getResponse(responseObject);
                    const formFocusedFieldIdCode = response.formFocusedFieldIdCode;
                    const item = response.data.item;
                    that.fields = response.data.fields;
                    
                    //extended fields
                    for (const key in that.fields) {
                        const field = that.fields[key];
                        field.showHelp = false;
                        field.parsedText = '';
                        field.showParsedText = false;
                        field.waitForParsing = false;
                    }

                    that.focusField(formFocusedFieldIdCode);
                    that.pageStatus = 'ready';
                }).catch(function (error) {
                    that.pageStatus = 'failed';
                });
            },
            processForm: function () {
                this.pageStatus = 'busy';
                const that = this;
                axios({
                    method: 'post',
                    url: 'controllerManagePageItem',
                    data: {
                        action: 'processForm',
                        fields: that.fields,
                        command: this.command,
                        id: this.id
                    }
                }).then(function (responseObject) {
                    const response = qsys.getResponse(responseObject);
                    const formFocusedFieldIdCode = response.formFocusedFieldIdCode;
                    that.formStatus = response.formStatus;
                    that.formMessage = response.formMessage;
                    that.fields = response.data.fields;
                    that.focusField(formFocusedFieldIdCode);
                    if (that.formStatus != 'invalid') {
                        that.returnToSendingPage();
                    } else {
                        that.pageStatus = 'ready';
                    }
                }).catch(function (error) {
                    that.formMessageKind = 'error';
                    that.formMessage = 'An unknown error occurred.';
                });
            },
            onEnterClick: function () {
                $('#buttonSubmit').click();
            },
            qstr_isEmpty: function (line) {
                return qstr.isEmpty(line);
            },
            formSubmitButtonShouldBeDisabled: function () {
                if (!this.clientSideEmptyFieldChecking) {
                    return false;
                }
                if (this.pageStatus == 'busy') {
                    return true;
                }
                for (const key in this.fields) {
                    const field = this.fields[key];
                    if (field.required && qstr.isEmpty(field.value)) {
                        return true;
                    }
                }
                return false;
            },
            keyWasPressed: function (e) {

                if (e.keyCode === 13 && e.ctrlKey) {
                    this.onEnterClick();
                }

                this.formSubmitButtonShouldBeDisabled();

                let thereAreErrors = false;

                //empty fields
                for (const idCode in this.fields) {
                    const field = this.fields[idCode];
                    if (field.required && qstr.isEmpty(field.value)) {
                        this.setDataInFields(idCode, 'errorMessage',
                            'This value is required and cannot be empty.');
                        thereAreErrors = true;
                    } else {
                        this.setDataInFields(idCode, 'errorMessage', '');
                    }
                }
            },
            focusField: function (fieldIdCode) {
                setTimeout(function () {
                    $('#field_' + fieldIdCode).focus();
                }, 50);
            },
            setDataInFields: function (idCode, property, value) {
                const field = `${idCode}.${property}`;
                _.set(this.fields, field, value)

            },
            thereAreRequiredFields: function () {
                for (const idCode in this.fields) {
                    const field = this.fields[idCode];
                    if (field.required) {
                        return true;
                    }
                }
                return false;
            },
            switchChoiceSelector: function (field) {
                switch (field.choiceSelector) {
                    case 'radioVertical':
                        field.choiceSelector = 'dropdown';
                        break;
                    case 'dropdown':
                        field.choiceSelector = 'radioHorizontal';
                        break;
                    case 'radioHorizontal':
                    default:
                        field.choiceSelector = 'radioVertical';
                        break;
                }
            },
            cancelForm: function () {
                this.returnToSendingPage();
            },
            returnToSendingPage() {
                qsys.gotoPage(this.returnUrl);
            },
            toggleShowHelp(field, fieldIdCode, parseMethod) {
                field.showHelp = !field.showHelp;
                if (field.showHelp) {
                    this.focusField(fieldIdCode);
                }
                this.parseHelpFieldText(field, fieldIdCode, parseMethod);
                this.$forceUpdate();
            }, 
            parseHelpFieldText(field, fieldIdCode, parseMethod = 'parseMarkdown') {
                field.waitForParsing = true;
                this.$forceUpdate();
                const that = this;
                axios({
                    method: 'post',
                    url: 'controllerManagePageItem',
                    data: {
                        action: parseMethod,
                        originalText: field.value
                    }
                }).then(function (responseObject) {
                    const response = qsys.getResponse(responseObject);
                    field.parsedText = response.data.parsedText;
                    field.showParsedText = true;
                    field.waitForParsing = false;
                    that.$forceUpdate();
                }).catch(function (error) {
                    that.formMessageKind = 'error';
                    that.formMessage = 'An unknown error occurred.';
                });
            }
        }
    });
    app.initialize();

        
    
    
    
    
    
    
    
    
    
    
</script>

<%- include(data.system_layout_footer)  %>