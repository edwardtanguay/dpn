<%
//DYNAMIC_VARIABLE:extensions=bootstrap,jquery,vuejs,axios,fontawesome,lodash
%>
<%- include(data.system_layout_header)  %>

<style>
	.outputArea {
		margin: 10px 0 0 0;
		max-width: 700px;
		background-color: #f6f6f6;
		padding: 5px;
		font-family: 'Courier New', Courier, monospace;
		font-size: 14px;
	}
</style>

<div id="app">

	<div class="card smartFormCard">
		<div class="card-header">
			<div class="pull-left" :class="{areaLoading: pageStatus=='busy'}">Showcase: Best ECMAScript 6 Features</div>
			<div class="pull-right">
				<div class="pull-left headerInfo"></div><i v-show="pageStatus!='ready'"
					class="pull-left fa fa-cog fa-spin waitSpinner"></i>
			</div>
		</div>
		<div class="card-body smartFormBody" :class="{areaLoading: pageStatus=='busy'}">
			<div class="messageArea" style="display:none">
				<div v-show="formStatus=='success'" class="alert alert-success" v-html="formMessage"></div>
				<div v-show="formStatus=='invalid'" class="alert alert-danger">
					<strong>Form is invalid:</strong> {{formMessage}}
				</div>
				<div v-show="formStatus=='error'" class="alert alert-danger">
					<strong>Error:</strong> <span v-html="formMessage"></span>
				</div>
			</div>
			<div v-show="pageStatus!='busy'" class="bodyContent" style="display:none">

				<!-- field: FEATURE -->
				<dl class="dataType_choice">
					<dt><span v-if="fields.feature.required">*</span>{{fields.feature.label}}</dt>
					<dd>
						<div>
							<!--radioVertical-->
							<div v-if="fields.feature.choiceSelector == 'radioVertical'" class="display_radioVertical">
								<ul>
									<li v-for="choice in fields.feature.choices">
										<label class="prohibitSelectionClickable"
											v-on:keyup.enter="onEnterClick()"><input type="radio"
												v-model="fields.feature.value" :value="choice.idCode">
											{{choice.label}}</label>
									</li>
								</ul>
							</div>
							<!--radioHorizontal-->
							<div v-if="fields.feature.choiceSelector == 'radioHorizontal'"
								class="display_radioHorizontal">
								<ul>
									<li v-for="choice in fields.feature.choices">
										<label class="prohibitSelectionClickable"
											v-on:keyup.enter="onEnterClick()"><input type="radio"
												v-model="fields.feature.value" :value="choice.idCode">
											{{choice.label}}</label>
									</li>
								</ul>
							</div>
							<!--dropdown-->
							<div v-if="fields.feature.choiceSelector == 'dropdown'" class="display_dropdown">
								<select v-model="fields.feature.value">
									<option v-for="choice in fields.feature.choices" :value="choice.idCode">
										{{choice.label}}</option>
								</select>
							</div>
						</div>
						<!-- field info, examples, and error messags -->
						<div>
							<small v-if="fields.feature.errorMessage != ''"
								class="error">{{fields.feature.errorMessage}}
							</small>
							<small v-if="fields.feature.info" class="info">{{fields.feature.info}} </small>
							<small v-if="fields.feature.example" class="example"><span
									class="exampleLabel">Example:</span> <span
									class="exampleText">{{fields.feature.example}}</span>
							</small>
						</div>
					</dd>
				</dl>

				<div>see also <a href="showcaseES6MapFunction">Showcase: ES6 map(), filter(), reduce(), find()
						functions</a></div>

				<!-- form notes -->
				<div class="pull-left formNotes">
					<span v-show="thereAreRequiredFields()" class="requiredFieldMarker">* required field</span>
				</div>

				<!-- submit button -->
				<div class="pull-right">
					<button id="buttonSubmit" :disabled="formSubmitButtonShouldBeDisabled()" @click="processForm()"
						class="btn btn-default formButton">Submit</button>
				</div>
			</div>
		</div>
	</div>


	<div class="outputArea" v-show="result" v-html="result"></div>


</div>

<script>
	const app = new Vue({
		el: '#app',
		data: {
			clientSideEmptyFieldChecking: false,
			pageStatus: 'ready',
			formStatus: '',
			formMessage: '',
			fields: {
				feature: {
					label: '',
					dataTypeIdCode: '',
					value: '',
					info: '',
					example: '',
					required: false,
					errorStatus: '',
					errorMessage: '',
					displayStatus: '',
					choices: '',
					choiceSelector: ''
				}
			},
			result: ''
		},
		methods: {
			initialize: function () {
				$('.bodyContent').show();
				$('.messageArea').show();
				this.loadPageData();
			},
			loadPageData: function () {
				this.pageStatus = 'busy';
				const that = this;
				axios({
					method: 'post',
					url: 'controllerShowcaseBestEcmascript6Features',
					data: {
						action: 'loadPageData'
					}
				}).then(function (responseObject) {
					const response = qsys.getResponse(responseObject);
					const formFocusedFieldIdCode = response.formFocusedFieldIdCode;
					that.fields = response.data.fields;
					that.focusField(formFocusedFieldIdCode);
					that.pageStatus = 'ready';
				}).catch(function (error) {
					that.pageStatus = 'failed';
				});
			},
			processForm: function () {
				this.pageStatus = 'busy';
				const that = this;
				axios({
					method: 'post',
					url: 'controllerShowcaseBestEcmascript6Features',
					data: {
						action: 'processForm',
						fields: that.fields
					}
				}).then(function (responseObject) {
					const response = qsys.getResponse(responseObject);
					const formFocusedFieldIdCode = response.formFocusedFieldIdCode;
					that.result = response.data.result;
					that.formStatus = response.formStatus;
					that.formMessage = response.formMessage;
					that.fields = response.data.fields;
					that.focusField(formFocusedFieldIdCode);
					that.pageStatus = 'ready';
				}).catch(function (error) {
					that.formMessageKind = 'error';
					that.formMessage = 'An unknown error occurred.';
				});
			},
			onEnterClick: function () {
				$('#buttonSubmit').click();
			},
			qstr_isEmpty: function (line) {
				return qstr.isEmpty(line);
			},
			formSubmitButtonShouldBeDisabled: function () {
				if (!this.clientSideEmptyFieldChecking) {
					return false;
				}
				if (this.pageStatus == 'busy') {
					return true;
				}
				for (const key in this.fields) {
					const field = this.fields[key];
					if (field.required && qstr.isEmpty(field.value)) {
						return true;
					}
				}
				return false;
			},
			keyWasPressed: function (e) {

				if (e.keyCode === 13 && e.ctrlKey) {
					this.onEnterClick();
				}

				this.formSubmitButtonShouldBeDisabled();

				let thereAreErrors = false;

				//empty fields
				for (const idCode in this.fields) {
					const field = this.fields[idCode];
					if (field.required && qstr.isEmpty(field.value)) {
						this.setDataInFields(idCode, 'errorMessage', 'This value is required and cannot be empty.');
						thereAreErrors = true;
					} else {
						this.setDataInFields(idCode, 'errorMessage', '');
					}
				}
			},
			focusField: function (fieldIdCode) {
				setTimeout(function () {
					$('#field_' + fieldIdCode).focus();
				}, 50);
			},
			setDataInFields: function (idCode, property, value) {
				const field = `${idCode}.${property}`;
				_.set(this.fields, field, value)

			},
			thereAreRequiredFields: function () {
				for (const idCode in this.fields) {
					const field = this.fields[idCode];
					if (field.required) {
						return true;
					}
				}
				return false;
			},
			switchChoiceSelector: function (field) {
				switch (field.choiceSelector) {
					case 'radioVertical':
						field.choiceSelector = 'dropdown';
						break;
					case 'dropdown':
						field.choiceSelector = 'radioHorizontal';
						break;
					case 'radioHorizontal':
					default:
						field.choiceSelector = 'radioVertical';
						break;
				}
			}
		}
	});
	app.initialize();
</script>

<%- include(data.system_layout_footer)  %>