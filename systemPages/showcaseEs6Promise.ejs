<%
//DYNAMIC_VARIABLE:extensions=bootstrap,jquery,vuejs,axios,fontawesome,lodash
%>
<%- include(data.system_layout_header)  %>

<style>
	.section {
		margin: 0 0 10px 0;
	}
</style>

<div id="app" class="pageContent">

	<h3>Showcase: ES6 Promise Code</h3>

	<div class="section">
		[{{message}}]
	</div>

	<div class="section">
		<button @click="processTest2()" class="btn btn-default btn-sm">Test 2</button>
	</div>
	<div class="section">
		[{{message2}}]
	</div>
	<div class="note">Note: this showcase is contains basic code showing the syntax of using promises. For more
		realistic code used for data
		loading promises
		using Axios, see <a href="showcaseLoadDataWithPromises">Showcase: Load Data with Promises</a></div>


	<div v-show="pageStatus == 'busy'"><i class="fa fa-spinner fa-pulse page_loading_spinner" aria-hidden="true"></i>
	</div>

</div>

<script>
	const app = new Vue({
		el: '#app',
		data: {
			pageStatus: 'ready',
			message: '',
			message2: 'getting data...'
		},
		methods: {
			initialize: function () {
				const that = this;
				$('.bodyContent').show();
				this.loadPageData();
				this.loadData('111')
					.then(() => {
						return that.loadData('222');
					})
					.then(() => {
						return that.loadData('333');
					})
					.then(() => {
						return that.loadData('444');
					})
					.then(() => {
						return that.loadData('555');
					});


				this.loadData('666')
					.then(() => {
						return that.loadData('77');
					})
					.then(() => {
						return that.loadData('888');
					});


				//test of simple promise
				/*
				this.wait(1000)
					.then(() => {
						console.log('111');
						return that.wait(1000);
					})
					.then(() => {
						console.log('222');
						x++; // triggers catch
					})
					.then(() => {
						console.log('333 - never executed');
					})
					.catch(error => {
						//console.log(typeof (error)); // "object"
						//console.log(Object.keys(error)); // shows nothing interesting
						console.log(error);
					})
					.then(() => {
						console.log('this is the finally or cleanup code');
					});
					*/

			},
			loadPageData: function () {
				this.pageStatus = 'busy';
				const that = this;
				axios({
					method: 'post',
					url: 'controllerShowcaseEs6Promise',
					data: {
						action: 'loadPageData'
					}
				}).then(function (responseObject) {
					const response = qsys.getResponse(responseObject);
					that.message = response.data.message;
					that.pageStatus = 'ready';
				}).catch(function (error) {
					that.pageStatus = 'failed';
				});
			},
			loadData: function (idCode) {
				return new Promise((resolve, reject) => {
					this.pageStatus = 'busy';
					const that = this;
					axios({
						method: 'post',
						url: 'controllerShowcaseEs6Promise',
						data: {
							action: 'loadData'
						}
					}).then(function (responseObject) {
						console.log('load: ' + idCode)
						const response = qsys.getResponse(responseObject);
						that.message2 = response.data.message2;
						that.pageStatus = 'ready';
						setTimeout(resolve);
					}).catch(function (error) {
						that.pageStatus = 'failed';
					});
				});
			},
			wait: function (delay = 0) {
				return new Promise((resolve, reject) => {
					setTimeout(resolve, delay);
				});
			},
			processTest2: function () {
				console.log('test2');
			}
		}
	});
	app.initialize();
</script>

<%- include(data.system_layout_footer)  %>