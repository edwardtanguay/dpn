<%
//DYNAMIC_VARIABLE:extensions=bootstrap,jquery,vuejs,axios,fontawesome,lodash
%>
<%- include(data.system_layout_header)  %>

<style>
    #field_inputText {
        height: 230px;
    }

    .markdownArea {
        padding: 10px;
        border: 5px solid #eee;
        border-radius: 5px;
        margin: 0 0 10px 0;
    }
</style>

<div id="app">

    <div class="card smartFormCard">
        <div class="card-header">
            <div class="pull-left" :class="{areaLoading: pageStatus=='busy'}">Showcase Markdown</div>
            <div class="pull-right">
                <div class="pull-left headerInfo"></div><i v-show="pageStatus!='ready'"
                    class="pull-left fa fa-cog fa-spin waitSpinner"></i>
            </div>
        </div>
        <div class="card-body smartFormBody" :class="{areaLoading: pageStatus=='busy'}">
            <div class="messageArea" style="display:none">
                <div v-if="formStatus=='success'" class="alert alert-success" v-html="formMessage"></div>
                <div v-if="formStatus=='invalid'" class="alert alert-danger">
                    <strong>Form is invalid:</strong> {{formMessage}}
                </div>
                <div v-if="formStatus=='error'" class="alert alert-danger">
                    <strong>Error:</strong> <span v-html="formMessage"></span>
                </div>
            </div>
            <div v-show="pageStatus!='busy'" class="bodyContent" style="display:none">

                <!-- field: INPUTTEXT -->
                <dl>
                    <dt style="display:none"><span v-if="fields.inputText.required">*</span>{{fields.inputText.label}}
                    </dt>
                    <dd>
                        <div>
                            <textarea id="field_inputText" :disabled="pageStatus=='busy'" v-model="originText"
                                class="form-control dataType_paragraph_control"></textarea>
                        </div>
                        <div>
                            <small v-if="fields.inputText.errorMessage != ''"
                                class="error">{{fields.inputText.errorMessage}}
                            </small>
                            <small v-if="fields.inputText.info" class="info">{{fields.inputText.info}} </small>
                            <small v-if="fields.inputText.example" class="example"><span
                                    class="exampleLabel">Example:</span> <span
                                    class="exampleText">{{fields.inputText.example}}</span>
                            </small>
                        </div>
                    </dd>
                </dl>

                <!-- field: OUTPUTTEXT -->
                <div v-show="fields.outputText.value" class="markdownArea">
                    <div class="markdownContent" v-html="fields.outputText.value"></div>
                </div>

                <!-- form notes -->
                <div class="pull-left formNotes">
                    <span v-if="thereAreRequiredFields()" class="requiredFieldMarker">* required field</span>
                </div>

                <!-- submit button -->
                <div style="display:none" class="pull-right">
                    <button id="buttonSubmit" :disabled="formSubmitButtonShouldBeDisabled()" @click="processForm()"
                        class="btn btn-default formButton">Parse</button>
                </div>
            </div>
        </div>
    </div>


</div>

<script>
    const app = new Vue({
        el: '#app',
        data: {
            clientSideEmptyFieldChecking: false,
            pageStatus: 'ready',
            formStatus: '',
            formMessage: '',
            fields: {
                inputText: {
                    label: '',
                    dataTypeIdCode: '',
                    value: '',
                    info: '',
                    example: '',
                    required: false,
                    errorStatus: '',
                    errorMessage: '',
                    displayStatus: '',
                    choices: '',
                    choiceSelector: ''
                },
                outputText: {
                    label: '',
                    dataTypeIdCode: '',
                    value: '',
                    info: '',
                    example: '',
                    required: false,
                    errorStatus: '',
                    errorMessage: '',
                    displayStatus: '',
                    choices: '',
                    choiceSelector: ''
                }
            },
            originText: ''
        },
        methods: {
            initialize: function () {
                $('.bodyContent').show();
                $('.messageArea').show();
                this.loadPageData();
            },
            loadPageData: function () {
                this.pageStatus = 'busy';
                const that = this;
                axios({
                    method: 'post',
                    url: 'controllerShowcaseMarkdown',
                    data: {
                        action: 'loadPageData'
                    }
                }).then(function (responseObject) {
                    const response = qsys.getResponse(responseObject);
                    const formFocusedFieldIdCode = response.formFocusedFieldIdCode;
                    that.fields = response.data.fields;
                    that.focusField(formFocusedFieldIdCode);
                    that.pageStatus = 'ready';
                    that.originText = that.fields.inputText.value;
                }).catch(function (error) {
                    that.pageStatus = 'failed';
                });
            },
            processForm: function () {
                //this.pageStatus = 'busy';
                const that = this;
                const saveValue = this.fields.inputText.value;
                console.log(saveValue);
                axios({
                    method: 'post',
                    url: 'controllerShowcaseMarkdown',
                    data: {
                        action: 'processForm',
                        fields: that.fields
                    }
                }).then(function (responseObject) {
                    const response = qsys.getResponse(responseObject);
                    const formFocusedFieldIdCode = response.formFocusedFieldIdCode;
                    that.formStatus = response.formStatus;
                    that.formMessage = response.formMessage;
                    that.fields = response.data.fields;
                    that.fields.inputText.value = saveValue;
                    that.focusField(formFocusedFieldIdCode);
                    this.originText = this.fields.inputText.value;
                    that.pageStatus = 'ready';
                }).catch(function (error) {
                    that.formMessageKind = 'error';
                    that.formMessage = 'An unknown error occurred.';
                });
            },
            onEnterClick: function () {
                $('#buttonSubmit').click();
            },
            qstr_isEmpty: function (line) {
                return qstr.isEmpty(line);
            },
            formSubmitButtonShouldBeDisabled: function () {
                if (!this.clientSideEmptyFieldChecking) {
                    return false;
                }
                if (this.pageStatus == 'busy') {
                    return true;
                }
                for (const key in this.fields) {
                    const field = this.fields[key];
                    if (field.required && qstr.isEmpty(field.value)) {
                        return true;
                    }
                }
                return false;
            },
            keyWasPressed: function (e) {

                if (e.keyCode === 13 && e.ctrlKey) {
                    this.onEnterClick();
                }

                this.formSubmitButtonShouldBeDisabled();

                let thereAreErrors = false;

                //empty fields
                for (const idCode in this.fields) {
                    const field = this.fields[idCode];
                    if (field.required && qstr.isEmpty(field.value)) {
                        this.setDataInFields(idCode, 'errorMessage', 'This value is required and cannot be empty.');
                        thereAreErrors = true;
                    } else {
                        this.setDataInFields(idCode, 'errorMessage', '');
                    }
                }
            },
            focusField: function (fieldIdCode) {
                setTimeout(function () {
                    $('#field_' + fieldIdCode).focus();
                }, 50);
            },
            setDataInFields: function (idCode, property, value) {
                const field = `${idCode}.${property}`;
                _.set(this.fields, field, value)

            },
            thereAreRequiredFields: function () {
                for (const idCode in this.fields) {
                    const field = this.fields[idCode];
                    if (field.required) {
                        return true;
                    }
                }
                return false;
            },
            switchChoiceSelector: function (field) {
                switch (field.choiceSelector) {
                    case 'radioVertical':
                        field.choiceSelector = 'dropdown';
                        break;
                    case 'dropdown':
                        field.choiceSelector = 'radioHorizontal';
                        break;
                    case 'radioHorizontal':
                    default:
                        field.choiceSelector = 'radioVertical';
                        break;
                }
            },
            processForm2: function () {
                console.log('ok');
            }
        },
        watch: {
            originText: function (val, oldVal) {
                this.fields.inputText.value = val;
                this.processForm();
            }
        }
    });
    app.initialize();

    $(function () {
        $(document).delegate('#field_inputText', 'keydown', function (e) {
            var keyCode = e.keyCode || e.which;

            if (keyCode == 9) {
                e.preventDefault();
                var start = this.selectionStart;
                var end = this.selectionEnd;

                // set textarea value to: text before caret + tab + text after caret
                $(this).val($(this).val().substring(0, start)
                    + "\t"
                    + $(this).val().substring(end));

                // put caret at right position again
                this.selectionStart =
                    this.selectionEnd = start + 1;
            }
        });
    });

</script>

<%- include(data.system_layout_footer)  %>